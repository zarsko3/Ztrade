[33mfe0446a[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m Fix data-fetch issues on analytics and AI dashboards - Add Clerk authentication to API routes - Protect dashboard pages with ProtectedRoute component - Add comprehensive RLS guides and performance optimization scripts - Fix Next.js config file extension for nested project
[33medc2668[m cleanup: remove debugging files and console logs - Remove all test endpoints and debugging routes - Clean up console logs from production code - Remove temporary scripts and SQL files - Streamline service factory and API routes - Production-ready clean codebase
[33me4d3e36[m debug: add minimal test endpoint - Create /api/trades/test-minimal to isolate the exact failure point - Test authentication, service creation, direct database query, and service method - Help identify where the error occurs in the chain
[33me28d6a7[m fix: improve SupabaseService getTrades method - Add detailed console logging for debugging - Simplify sorting logic to avoid column mapping issues - Improve error messages with specific error details - Add logging for query execution and results processing
[33ma308857[m security: implement production-ready security with RLS - Update SupabaseService to use admin client for server-side operations - Add user-based filtering in application code for data isolation - Ensure all queries require userId for security - Prepare for proper RLS policies
[33maed7844[m debug: add direct Supabase test endpoint - Create /api/trades/test-direct to bypass service layer - Test direct queries with detailed error logging - Check for RLS, permissions, and connection issues
[33mea9f63b[m debug: add Supabase table test endpoint - Create /api/trades/test-supabase to check if tables exist - Test trades, users, and general connection - Help identify why Supabase connection is failing
[33m1e24f2e[m fix: force Supabase service in production - Remove dependency on USE_SUPABASE environment variable - Always use SupabaseService in production environment - Always use TradeService (Prisma) in development - This should resolve the 500 error on live site
[33m1aafacf[m debug: add comprehensive error logging for production - Add debug endpoint at /api/trades/debug to test all components - Add detailed step-by-step logging to main trades API route - Log environment variables, authentication, service type, and errors - Help identify the exact cause of 500 errors in production
[33mc2ff583[m fix: create hybrid service architecture for production - Add trade service factory to choose between Supabase and Prisma - Update Supabase service to handle new request format with userId - Add missing methods to Supabase service (getPosition, hasOpenPosition, getTradeStats) - Update API routes to use service factory - Production will use Supabase, development uses Prisma
